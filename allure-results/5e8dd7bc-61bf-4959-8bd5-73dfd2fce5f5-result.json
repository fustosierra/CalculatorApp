{"name":"testScientificNotationForDivideOperationResult","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"expected [Result: 10000000] but found [Result: 1.0E7]","trace":"java.lang.AssertionError: expected [Result: 10000000] but found [Result: 1.0E7]\n\tat org.testng.Assert.fail(Assert.java:97)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:136)\n\tat org.testng.Assert.assertEquals(Assert.java:118)\n\tat org.testng.Assert.assertEquals(Assert.java:575)\n\tat org.testng.Assert.assertEquals(Assert.java:585)\n\tat com.calculator.scientificnotation.ScientificNotationTests.testScientificNotationForDivideOperationResult(ScientificNotationTests.java:111)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)\n\tat org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:240)\n\tat org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:181)\n\tat org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:252)\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:593)\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:766)\n\tat org.testng.TestRunner.run(TestRunner.java:587)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:384)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:286)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1109)\n\tat org.testng.TestNG.runSuites(TestNG.java:1039)\n\tat org.testng.TestNG.run(TestNG.java:1007)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:65)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1723031833667,"stop":1723031834550,"uuid":"5e8dd7bc-61bf-4959-8bd5-73dfd2fce5f5","historyId":"86c01091ef85ffff703ce54d9c0a207c","fullName":"com.calculator.scientificnotation.ScientificNotationTests.testScientificNotationForDivideOperationResult","labels":[{"name":"package","value":"com.calculator.scientificnotation.ScientificNotationTests"},{"name":"testClass","value":"com.calculator.scientificnotation.ScientificNotationTests"},{"name":"testMethod","value":"testScientificNotationForDivideOperationResult"},{"name":"parentSuite","value":"Default Suite"},{"name":"suite","value":"AutomationProject"},{"name":"subSuite","value":"com.calculator.scientificnotation.ScientificNotationTests"},{"name":"host","value":"PL61XFP3WJ"},{"name":"thread","value":"71146@PL61XFP3WJ.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"},{"name":"story","value":"The Divide operation should be performed on Integer and Real Numbers."},{"name":"story","value":"Real Numbers Should be displayed in Scientific Notation for  interval -10,000,000 <= X >= 10,000,000. Scientific notation should be displayed using this type of representation 10,000,000 = 1.0E7."}],"links":[]}